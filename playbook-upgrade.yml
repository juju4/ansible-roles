---
## $ ansible-playbook -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory -u vagrant roles/playbook-upgrade.yml
## Note: aide run uses lot of memory, if less than 1GB, ensure there is a swap available or aide will be killed

- hosts: all
  gather_facts: yes
#  remote_user: ubuntu
## deploy by step of 25% devices or by 10 devices
#  serial: "25%"
#  serial: 10
## http://docs.ansible.com/ansible/playbooks_delegation.html
  max_fail_percentage: 30
  become: yes
## 1.9.1+, https://docs.ansible.com/ansible/playbooks_error_handling.html
  force_handlers: True
## http://docs.ansible.com/ansible/guide_rolling_upgrade.html
  vars:
    - verbose: true
    - w_nagios: false
    - w_haproxy: false
#    - w_vm_snapshot: vbox
#    - w_vm_snapshot: vmware
#    - vm_host: localhost
#    - vm_guest_name: {{ inventory_hostname }}
#    - vm_snapshot_name: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}-{{ inventory_hostname }}-auto"
#    - vm_snapshot_description: 'Ansible playbook-upgrade automated snapshot'
#    - vm_vsphere_id:
    - noreboot: true   # if you want to disable necessary reboot, list systems here
    - vboxguest: true  # list VM
    - groups:
        monitoring:
        lbservers:
    - upgrade_aidedb_rotate: 7
#    - gem_upgrade_exclude_hosts:
#    - gem_user:
#    - pip_upgrade_exclude_hosts:
  pre_tasks:
    - name: Debian | install required aptitude to manage upgrades
      apt: name=aptitude state=present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - block:
        - name: disable nagios alerts for this host webserver service
          nagios: "action=disable_alerts host={{ inventory_hostname }} services=webserver"
          delegate_to: "{{ item }}"
          with_items: "{{ groups.monitoring }}"
      when: w_nagios is defined and w_nagios
    - name: disable the server in haproxy
      debug: msg="FIXME!"
#      shell: echo "disable server myapplb/{{ inventory_hostname }}" | socat stdio /var/lib/haproxy/stats
      delegate_to: "{{ item }}"
      with_items: "{{ groups.lbservers }}"
      when: w_haproxy is defined and w_haproxy
    - stat: path=/usr/bin/falco
      register: falcobin
    - name: disable falco HIDS during upgrade
      service: name=falco state=stopped
      when: falcobin.stat.exists
    - name: check existing vms on vm host - inventory user only
      command: "VBoxManage list vms"
      delegate_to: "{{ vm_host }}"
      become: no
      register: listvms
      when: w_vm_snapshot is defined and w_vm_snapshot == 'vbox' and vm_host is defined and vm_list[{{ inventory_hostname }}] is defined
      changed_when: false
#    - debug: var=listvms.stdout_lines
#    - debug: var="VBoxManage snapshot {{ vm_guest_name }} take {{ vm_snapshot_name }} --description '{{ vm_snapshot_description }}'"
## OK but failed w The async task did not return valid JSON: No JSON object could be decoded"
    - name: take a snapshot of host on server - virtualbox
      command: "VBoxManage snapshot {{ vm_guest_name }} take {{ vm_snapshot_name }} --description '{{ vm_snapshot_description }}'"
      delegate_to: "{{ vm_host }}"
      when: w_vm_snapshot is defined and w_vm_snapshot == 'vbox' and vm_host is defined and listvms.stdout.find("{{ vm_guest_name }}") != -1
## BUG: https://github.com/ansible/ansible/issues/13965; https://github.com/ansible/ansible/issues/11240
#      async: 3600
#      poll: 180
      become: no
## http://blog-lrivallain.rhcloud.com/2015/02/26/play-vm-snapshots-esxi-command-line-tools/
    - name: take a snapshot of host on server - vsphere
      command: "vim-cmd vmsvc/snapshot.create {{ vm_vsphere_id }} {{ vm_snapshot_name }} '{{ vm_snapshot_description }}' 1 1"
      delegate_to: "{{ vm_host }}"
      when: w_vm_snapshot is defined and w_vm_snapshot == 'vsphere' and vm_host is defined
      async: 3600
      poll: 180
## Note: debian: if running, kill /etc/cron.daily/apt
    - name: check if cron.daily/apt has the lock
      command: pgrep -f /etc/cron.daily/apt
      register: cronapt
      changed_when: False
      ignore_errors: true
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - name: kill cron.daily/apt
      command: kill {{ cronapt.stdout }}
      when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and cronapt is defined and cronapt.stdout != ''
  post_tasks:
    - name: Enable the server in haproxy
      shell: echo "enable server myapplb/{{ inventory_hostname }}" | socat stdio /var/lib/haproxy/stats
      delegate_to: "{{ item }}"
      with_items: "{{ groups.lbservers }}"
      when: w_haproxy is defined and w_haproxy
    - name: re-enable nagios alerts
      nagios: action=enable_alerts host={{ inventory_hostname }} services=webserver
#      delegate_to: "{{ groups.monitoring }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups.monitoring }}"
      when: w_nagios is defined and w_nagios
    - name: re-enable falco HIDS after upgrade
      service: name=falco state=started
      when: falcobin.stat.exists

  roles:
#    - juju4.upgrade-pkgs-gem
#    - juju4.upgrade-pkgs-pip
    - juju4.upgrade-pkgs

